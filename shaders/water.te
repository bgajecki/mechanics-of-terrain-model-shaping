#version 460 core

layout (triangles, equal_spacing, ccw) in;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform float rotationAngle;

in vec2 textureCoordinates[];
in vec3 normal[];

out vec2 textureCoords;
out vec3 FragPosition;
out vec3 FragNormal;

mat4 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

void main()
{
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;

	vec2 uv0 = textureCoordinates[0];
	vec2 uv1 = textureCoordinates[1];
	vec2 uv2 = textureCoordinates[2];
	//vec2 uv3 = textureCoordinates[3];

	//vec2 leftUv = uv0 + v * (uv3 - uv0);
	//vec2 rightUv = uv1 + v * (uv2 - uv1);
	//vec2 texCoord = leftUv + u * (rightUv - leftUv);
	
	vec4 pos0 = gl_in[0].gl_Position;
	vec4 pos1 = gl_in[1].gl_Position;
	vec4 pos2 = gl_in[2].gl_Position;
	//vec4 pos3 = gl_in[3].gl_Position;

	//vec4 leftPos = pos0 + v * (pos3 - pos0);
	//vec4 rightPos = pos1 + v * (pos2 - pos1);
	//vec4 pos = leftPos + u * (rightPos - leftPos);

	vec3 nm0 = normal[0];
	vec3 nm1 = normal[1];
	vec3 nm2 = normal[2];
	//vec3 nm3 = normal[3];

	//vec3 leftNm = nm0 + v * (nm3 - nm0);
	//vec3 rightNm = nm1 + v * (nm2 - nm1);
	//vec3 nm = leftNm + u * (rightNm - leftNm);

	vec2 texCoord = u * uv0 + v * uv1 + w * uv2;
	vec4 pos = u * pos0 + v * pos1 + w * pos2;
	vec3 nm = u * nm0 + v * nm1 + w * nm2;

	if(texCoord.x == 0.0
	|| texCoord.x == 1.0
	|| texCoord.y == 0.0
	|| texCoord.y == 1.0)
	{
		gl_Position = projection * view * model * pos;
	}
	else
	{
		mat4 rotation = rotationMatrix(vec3(0.0f, 1.0f, 0.0f), rotationAngle);
		vec4 localPos = rotation * vec4(0.01f, 0.0f, 0.0f, 0.0f);
		gl_Position = projection * view * model * (pos + localPos);
	}
	textureCoords = texCoord;
	FragPosition.xyz = pos.xyz;
	FragNormal = nm;

}