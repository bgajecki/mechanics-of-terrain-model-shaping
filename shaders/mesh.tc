#version 460 core

layout(vertices = 4) out;

in vec2 textureCoords[];
in vec3 FragNormal[];

uniform mat4 view;
uniform mat4 model;

out vec2 textureCoordinates[];
out vec3 normal[];

void main()
{
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	textureCoordinates[gl_InvocationID] = textureCoords[gl_InvocationID];
	normal[gl_InvocationID] = FragNormal[gl_InvocationID];

	if(gl_InvocationID == 0)
	{
        const int MINIMAL_TESSELATION_LEVEL = 1;
        const int MAXIMAL_TESSELATION_LEVEL = 16;
        const float MINIMAL_DISTANCE = 0;
        const float MAXIMAL_DISTANCE = 5;

        vec4 pos0 = view * model * gl_in[0].gl_Position;
        vec4 pos1 = view * model * gl_in[1].gl_Position;
        vec4 pos2 = view * model * gl_in[2].gl_Position;

        float distance0 = clamp((abs(pos0.z)-MINIMAL_DISTANCE) / (MAXIMAL_DISTANCE-MINIMAL_DISTANCE), 0.0, 1.0);
        float distance1 = clamp((abs(pos1.z)-MINIMAL_DISTANCE) / (MAXIMAL_DISTANCE-MINIMAL_DISTANCE), 0.0, 1.0);
        float distance2 = clamp((abs(pos2.z)-MINIMAL_DISTANCE) / (MAXIMAL_DISTANCE-MINIMAL_DISTANCE), 0.0, 1.0);

        float level0 = mix(MAXIMAL_TESSELATION_LEVEL, MINIMAL_TESSELATION_LEVEL, distance0);
        float level1 = mix(MAXIMAL_TESSELATION_LEVEL, MINIMAL_TESSELATION_LEVEL, distance1);
        float level2 = mix(MAXIMAL_TESSELATION_LEVEL, MINIMAL_TESSELATION_LEVEL, distance2);

        gl_TessLevelOuter[0] = level0;
        gl_TessLevelOuter[1] = level1;
        gl_TessLevelOuter[2] = level2;

        gl_TessLevelInner[0] = max(max(level0, level1), level2);
	}
}
